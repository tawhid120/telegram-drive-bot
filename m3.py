# m3.py (Debouncing Logic Version)

import asyncio
import random
from telethon import TelegramClient, events
from telethon.errors.rpcerrorlist import FloodWaitError, UserBannedInChannelError, ChatWriteForbiddenError

# --- Account 1 Credentials ---
api_id_1 = 
api_hash_1 = ''
session_name_1 = 'session_account_1'

# --- Account 2 Credentials ---
api_id_2 = 
api_hash_2 = ''
session_name_2 = 'session_account_2'

# --- List of public group usernames to monitor ---
group_usernames = [
    'Acs_Udvash_Link', 'buetkuetruetcuet', 'linkedstudies', 'thejournyofhsc24',
    'hsc_sharing', 'ACSDISCUSSION', 'HHEHRETW', 'chemistryteli', 'haters_hsc',
    'hsc234', 'studywar2021', 'DiscussionGroupEngineering', 'Dacs2025', 'superb1k',
]

# --- Path to your image ---
image_path = 'Replit.jpg'

# --- The message to be sent ---
message_to_send = """
**üéì ‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß´‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‚Äì ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü!**


1Ô∏è‚É£ **HSC ‡¶ó‡¶æ‡¶á‡¶°‡¶≤‡¶æ‡¶á‡¶®, ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶ì ‡ß®‡ß™/‡ß≠ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‚Äì**
     @guildline01

2Ô∏è‚É£ **‡¶´‡ßç‡¶∞‡¶ø ‡¶ü‡¶æ‡¶á‡¶Æ‡ßá ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶¶‡¶ø‡ßü‡ßá‡¶á ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ ‡¶∂‡ßá‡¶ñ‡ßã ‚Äì**            
      @EarnovaX

3Ô∏è‚É£ **Class + Note + Guide PDF:**
     @PDFNexus

4Ô∏è‚É£ **‡¶™‡ßç‡¶∞‡¶§‡¶ø Gmail ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßã 12 ‡¶ü‡¶æ‡¶ï‡¶æ** ‚Äì
üîó https://t.me/GmailFarmerBot?start=7647683104

5Ô∏è‚É£ Spoken English Zone üá¨üáß
Spoken English, Grammar, Vocabulary ‡¶ì IELTS ‡¶∂‡ßá‡¶ñ‡ßã ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá‡•§
üéØ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶∂‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∞‡¶´‡ßá‡¶ï‡ßç‡¶ü ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‚Äì
üëâ [Join Now](https://t.me/Spoken_English_Zone)
"""

# --- Initialize clients ---
client1 = TelegramClient(session_name_1, api_id_1, api_hash_1)
client2 = TelegramClient(session_name_2, api_id_2, api_hash_2)

clients = [client1, client2]
bot_ids = set()
active_client_index = 0

# --- ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: Debouncing ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ---
# ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø
debounce_tasks = {}
# ‡¶ï‡¶§‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶®‡¶æ ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá (‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá)
DEBOUNCE_DELAY = 10  # ‡ß®‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶®‡ßÄ‡¶∞‡¶¨‡¶§‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá

# --- ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
async def send_promotional_message(chat_id, chat_title):
    """
    ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶ï‡¶∞‡ßá‡•§
    """
    global active_client_index
    
    active_client = clients[active_client_index]
    client_number = active_client_index + 1

    try:
        print(f"‚úÖ Silence period of {DEBOUNCE_DELAY}s ended for '{chat_title}'. Sending message now...")
        await active_client.send_message(
            chat_id,
            message_to_send,
            file=image_path,
            parse_mode='md'
        )
        print(f"‚úîÔ∏è Message with image successfully sent to '{chat_title}' by Client {client_number}.")

        # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®
        active_client_index = (active_client_index + 1) % len(clients)
        print(f"--> Switched active account. Next message will be from Client {active_client_index + 1}.\n")

    except FileNotFoundError:
        print(f"ERROR: Image file not found at '{image_path}'.")
    except (ChatWriteForbiddenError, UserBannedInChannelError):
        print(f"‚ùå Client {client_number} cannot post in '{chat_title}' (banned or permissions error).")
    except FloodWaitError as e:
        print(f"‚ö†Ô∏è Flood wait error for Client {client_number}. Waiting for {e.seconds} seconds.")
        await asyncio.sleep(e.seconds)
    except Exception as e:
        print(f"An unexpected error occurred with Client {client_number} while sending to {chat_title}: {e}")
    finally:
        # ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü
        if chat_id in debounce_tasks:
            del debounce_tasks[chat_id]


@client1.on(events.NewMessage(chats=group_usernames))
async def main_handler(event):
    """
    ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶π‡ßü ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§
    """
    # ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶â‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ
    if event.message.sender_id in bot_ids:
        return

    chat_id = event.chat_id
    
    # --- ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: Debouncing ‡¶≤‡¶ú‡¶ø‡¶ï ---
    # ‡ßß. ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶∏‡ßá‡¶ü‡¶ø ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
    if chat_id in debounce_tasks:
        debounce_tasks[chat_id].cancel()

    # ‡ß®. ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ü‡¶ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
    # DEBOUNCE_DELAY ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ send_promotional_message ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§
    async def schedule_send():
        try:
            await asyncio.sleep(DEBOUNCE_DELAY)
            await send_promotional_message(chat_id, event.chat.title)
        except asyncio.CancelledError:
            # ‡¶Ø‡¶ñ‡¶® ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶π‡ßü, ‡¶§‡¶ñ‡¶® ‡¶è‡¶ü‡¶ø ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï
            print(f"Debounce timer reset for '{event.chat.title}' due to new activity.")
            # ‡¶¨‡ßç‡¶Ø‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶Æ‡¶ü‡¶ø ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶â‡¶§‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶æ‡¶§‡ßá ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º
            raise

    print(f"New activity in '{event.chat.title}'. Waiting for {DEBOUNCE_DELAY}s of silence...")
    debounce_tasks[chat_id] = asyncio.create_task(schedule_send())


async def main():
    print("Connecting clients...")
    await client1.start()
    print("‚úÖ Client 1 connected successfully.")
    await client2.start()
    print("‚úÖ Client 2 connected successfully.")
    
    bot_ids.add((await client1.get_me()).id)
    bot_ids.add((await client2.get_me()).id)

    print("-------------------------------------------------")
    print(f"Bot is now monitoring {len(group_usernames)} groups with Debounce logic.")
    print(f"Will post a message after {DEBOUNCE_DELAY} seconds of inactivity in a group.")
    print("Waiting for new messages...")

    await client1.run_until_disconnected()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nBot stopped by user.")
    except Exception as e:
        print(f"üõë A critical error occurred in the main loop: {e}")
